[{"title":"mathjax语法使用","url":"/posts/64b6/","content":"说明当前博客已启用mathjax语法，可以更方便的书写数学公式。\n示例$$ n = p \\times q $$\nn = p \\times q$$ \\phi(n) = (p-1)(q-1) $$\n\\phi(n) = (p-1)(q-1)$$ 1 &lt; e &lt; \\phi(n) $$$$ \\gcd(e, \\phi(n)) = 1 $$\n1 < e < \\phi(n)\\gcd(e, \\phi(n)) = 1$$ a = b + c^3 $$\na = b + c^3$$ a = b + c^&#123;3+1&#125; $$\na = b + c^{3+1}$$a_b$$\na_b","categories":["Hexo使用"],"tags":["Butterfly","Hexo"]},{"title":"Mermaid流程图使用方法","url":"/posts/ddad/","content":"说明当前博客已经 启用 Mermaid 图表功能，可以直接在 Markdown 中绘制流程图、时序图、状态图、甘特图等可视化内容。\n\n✅ Mermaid 是一个支持用纯文本描述流程的图表语言，非常适合在 Hexo + Obsidian 环境中做技术笔记和架构图展示。\n\n基本语法示例流程图\ngraph TD;\n  A--&gt;B;\n  A--&gt;C;\n  B--&gt;D;\n  C--&gt;D;\n\nflowchart TD\n    A[开始] --&gt; B&#123;条件判断&#125;\n    B --&gt;|是| C[执行操作1]\n    B --&gt;|否| D[执行操作2]\n    C --&gt; E[结束]\n    D --&gt; E\n时序图\nsequenceDiagram\n    participant Alice\n    participant Bob\n    Alice-&gt;&gt;Bob: 你好，Bob！\n    Bob--&gt;&gt;Alice: 你好，Alice！\n状态图stateDiagram-v2\n    [*] --&gt; 初始化\n    初始化 --&gt; 运行中\n    运行中 --&gt; 完成\n    完成 --&gt; [*]\n饼图\npie title 我最喜爱的编程语言\n    &quot;Python&quot; : 45\n    &quot;JavaScript&quot; : 25\n    &quot;Java&quot; : 15\n    &quot;C++&quot; : 10\n    &quot;其他&quot; : 5\n象限图\nquadrantChart\ntitle 促销活动效果分析\nx-axis &quot;低覆盖宣传&quot; --&gt; &quot;高覆盖宣传&quot;\ny-axis &quot;低参与度&quot; --&gt; &quot;高参与度&quot;\nquadrant-1 &quot;明星活动：保持投入&quot;\nquadrant-2 &quot;潜力活动：需加大曝光&quot;\nquadrant-3 &quot;待优化活动：重新评估&quot;\nquadrant-4 &quot;高效活动：可稳健扩张&quot;\n&quot;活动A&quot;: [0.75, 0.85]\n&quot;活动B&quot;: [0.45, 0.70]\n&quot;活动C&quot;: [0.25, 0.40]\n&quot;活动D&quot;: [0.80, 0.35]\n甘特图关键语法解读：\n\ndateFormat：定义日期格式。\nsection**​：将任务分组，如“需求阶段”、“开发阶段”。\n​任务定义​：格式为 任务名称 : [状态, ] 别名, 开始时间, 持续时间。\n状态​：done（已完成），active（进行中），crit（关键任务）。​\n别名​：任务的标识符，可用于后续任务引用，如 after des1表示该任务在 des1之后开始。\n时间​：可以是绝对日期（2024-12-01），也可以是相对时间（after 某任务, 3d）。gantt\n    title 项目开发时间线\n    dateFormat  YYYY-MM-DD\n    section 需求阶段\n        需求分析       :done,    des1, 2024-12-01, 2024-12-07\n        需求评审       :active,  des2, after des1, 3d\n    section 开发阶段\n        技术方案设计   :         des3, after des2, 5d\n        编码实现       :         des4, after des3, 10d\n    section 测试阶段\n        功能测试       :         des5, after des4, 7d\n        上线部署       :         des6, after des5, 2d\n\n\n\n\n类图\n关键语法解读：​\n\n​定义类​：使用 class关键字。类成员可用 {}包裹。\n成员可见性​：+表示公有（Public），-表示私有（Private），#表示受保护（Protected）。\n​类关系​：\n​继承​：&lt;|--（如 Dog继承自 Animal）。\n​组合​：*--（强的拥有关系，部分与整体共存亡）。\n聚合​：o--（弱的拥有关系，部分可独立于整体）。\n关联​：--&gt;（一个类知道另一个类）。\n\n\n\nclassDiagram\n    class Animal &#123;\n        +String name\n        +int age\n        +eat()\n        +sleep()\n    &#125;\n    class Dog &#123;\n        +String breed\n        +bark()\n    &#125;\n    class Cat &#123;\n        +String color\n        +meow()\n    &#125;\n    Animal &lt;|-- Dog\n    Animal &lt;|-- Cat\n实体关系（ER图）\n关键语法解读：​\n\n​定义实体和属性​：实体名称通常首字母大写。属性可以在实体下方的 {}块中定义，PK表示主键（Primary Key）。\n​关系语法​：实体A 基数A--基数B 实体B : &quot;关系描述&quot;。\n\n​基数符号​：表示实体间的数量关系。\n\n||表示“一且只有一个”（恰好一个）。\no|表示“零或一个”。\n}o表示“零或多个”。\n}|表示“一或多个”。\n\n\n例如，CUSTOMER ||--o{ ORDER : &quot;places&quot;表示一个客户（CUSTOMER）可以下多个订单（ORDER）（“零或多个”），而一个订单只属于一个客户（“恰好一个”）。\n\n\n\n\nerDiagram\n    CUSTOMER ||--o&#123; ORDER : &quot;places&quot;\n    ORDER ||--|&#123; ORDER_ITEM : &quot;contains&quot;\n    PRODUCT ||--|&#123; ORDER_ITEM : &quot;included_in&quot;\n\n    CUSTOMER &#123;\n        string customer_id PK\n        string name\n        string email\n    &#125;\n    ORDER &#123;\n        string order_id PK\n        string customer_id FK\n        date order_date\n    &#125;\n    PRODUCT &#123;\n        string product_id PK\n        string product_name\n        decimal price\n    &#125;\n    ORDER_ITEM &#123;\n        string order_id FK\n        string product_id FK\n        int quantity\n    &#125;","categories":["Hexo使用"],"tags":["Butterfly","Hexo"]}]