<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【强网杯】第六届强网杯青少年线下赛AWDP复盘</title>
      <link href="/articles/57061.html"/>
      <url>/articles/57061.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今年的青少赛线下多了很多有质量的题目，在第一天的创新赛中，也第一次引入了一些新形势的东西，比如近源渗透中WIFI密码破解、服务器密码破解甚至M1卡（大华梯控的分析与修改等），这些东西确实很棒。不过，今天我们还是来先说说AWDP模式中的问题和技巧进行复盘。</p><h1 id="AWDP-Web-ezdja"><a href="#AWDP-Web-ezdja" class="headerlink" title="AWDP - Web ezdja"></a>AWDP - Web ezdja</h1><p>这是一道DJango的题目，正好前两天研究了一下DJango的开发，所以这道题目修补的很快，得心应手。</p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231218235730512.png"></p><p>这是题目的目录环境，我暂时没有复现该环境，其实也可以说，这次的复盘是根据防守方进行复盘的。</p><p>我们使用VScode对代码环境进行查看和编辑。</p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231219000152209.png"></p><p>在app01目录中，我们可以找到一个很抽象的脚本，myfunc.py</p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231219000424587.png">在其中的52-71行，也很抽象的定义了两个waf方法，那么第一个waf就是防护sql注入的。</p><p>我们使用VScode进行全局搜索，搜索一下哪些地方使用了waf方法：</p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231219000701654.png"></p><p>发现是在views.py中，对登录的用户名的检测位置，使用了waf函数。那么大家看到这里的时间就会想，那这题目的登录、注册两个功能，为什么没用呢？</p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231219000944681.png"></p><p>通过上图，我们可以看到，对数据库进行操作的语句，其实是一个对象操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.objects.<span class="built_in">filter</span>(username=username, haha_p433w0rd=password)</span><br></pre></td></tr></table></figure><p>基本上不会存在注入，而存在注入的点是什么呢？</p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231219001110586.png"></p><p>其实只有在浏览页面的时候传入的session中username字段，其实我在挖掘的时候也正是没有看到这个点，而想着是不是在登录的地方有sql注入呢？</p><p>那么修补办法，就是对waf函数进行增强。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">sql</span>):</span><br><span class="line">    blacklists = [<span class="string">&quot;union select&quot;</span>, <span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;benchmark&quot;</span>,<span class="string">&quot;columns&quot;</span>,<span class="string">&quot;load_file&quot;</span>,<span class="string">&quot;local&quot;</span>,<span class="string">&quot;outfile&quot;</span>,<span class="string">&quot;dumpfile&quot;</span>,<span class="string">&quot;file&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> blacklist <span class="keyword">in</span> blacklists:</span><br><span class="line">        <span class="keyword">if</span> blacklist <span class="keyword">in</span> sql:</span><br><span class="line">            <span class="built_in">print</span>(blacklist)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>我们可以看到，原来的waf函数过滤的很抽象，为什么这么说呢？因为他只过滤这些内容了，我们甚至能通过sqlmap进行注入。</p><p>于是我根据php的通防脚本（后面会给大家）修改，套了一下就成功防御了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">sql</span>):</span><br><span class="line">    blacklists = [<span class="string">&quot;union select&quot;</span>, <span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;benchmark&quot;</span>,<span class="string">&quot;columns&quot;</span>,<span class="string">&quot;load_file&quot;</span>,<span class="string">&quot;local&quot;</span>,<span class="string">&quot;outfile&quot;</span>,<span class="string">&quot;dumpfile&quot;</span>,<span class="string">&quot;file&quot;</span>,<span class="string">&quot;union&quot;</span>,<span class="string">&quot;select&quot;</span>,</span><br><span class="line"><span class="string">&quot;select&quot;</span>,<span class="string">&quot;and&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;x09&quot;</span>,<span class="string">&quot;x0a&quot;</span>,<span class="string">&quot;x0b&quot;</span>,<span class="string">&quot;x0c&quot;</span>,<span class="string">&quot;x0d&quot;</span>,<span class="string">&quot;xa0&quot;</span>,<span class="string">&quot;x00&quot;</span>,<span class="string">&quot;x26&quot;</span>,<span class="string">&quot;x7c&quot;</span>,<span class="string">&quot;or&quot;</span>,<span class="string">&quot;into&quot;</span>,<span class="string">&quot;from&quot;</span>,<span class="string">&quot;where&quot;</span>,<span class="string">&quot;join&quot;</span>,<span class="string">&quot;sleexml&quot;</span>,<span class="string">&quot;extractvalue&quot;</span>,<span class="string">&quot;+&quot;</span>,<span class="string">&quot;regex&quot;</span>,<span class="string">&quot;copy&quot;</span>,<span class="string">&quot;read&quot;</span>,<span class="string">&quot;file&quot;</span>,<span class="string">&quot;create&quot;</span>,<span class="string">&quot;grand&quot;</span>,<span class="string">&quot;dir&quot;</span>,<span class="string">&quot;insert&quot;</span>,<span class="string">&quot;link&quot;</span>,<span class="string">&quot;server&quot;</span>,<span class="string">&quot;drop&quot;</span>,<span class="string">&quot;=&quot;</span>,<span class="string">&quot;&gt;&quot;</span>,<span class="string">&quot;&lt;&quot;</span>,<span class="string">&quot;;&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> blacklist <span class="keyword">in</span> blacklists:</span><br><span class="line">        <span class="keyword">if</span> blacklist <span class="keyword">in</span> sql:</span><br><span class="line">            <span class="built_in">print</span>(blacklist)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="AWDP-Web-found-cms"><a href="#AWDP-Web-found-cms" class="headerlink" title="AWDP - Web found_cms"></a>AWDP - Web found_cms</h1><p>这道题其实在做题的时候我是有点懵逼的，但是现在复盘一下，又恍然大悟了。</p><h1 id="AWDP-easygo"><a href="#AWDP-easygo" class="headerlink" title="AWDP - easygo"></a>AWDP - easygo</h1><p>我个人没有什么pwn经验，所以后续要努力学Pwn了。</p><p>使用IDA64打开文件，进行分析。</p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231219161421117.png"></p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231219161511124.png"></p><p>跟着程序流程走，发现下图的main_backdoor</p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231219161536644.png"></p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231219161604642.png"></p><p>追踪，发现cat &#x2F;flag和&#x2F;bin&#x2F;bash的调用。</p><p>既然是AWDP，我们不难想象出官方的EXP和我们应该如何修补。</p><p>我的解决办法呢，就是修补这个位置：</p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231219161908395.png"></p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231219161930093.png"></p><p>点击cat &#x2F;flag，对cat flag进行修改。</p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231219162004073.png"></p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231219162133735.png"></p><p>修改为</p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231219162125875.png"></p><p>这样就无法通过原exp获取到flag了</p><p><img src="/../img/%E3%80%90%E5%BC%BA%E7%BD%91%E6%9D%AF%E3%80%91%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E7%BA%BF%E4%B8%8B%E8%B5%9BAWDP%E5%A4%8D%E7%9B%98/image-20231219162506728.png"></p><p>接着写出文件，保存，然后放到服务器上更新即可。</p><h1 id="附件-PHP通防"><a href="#附件-PHP通防" class="headerlink" title="附件 - PHP通防"></a>附件 - PHP通防</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wafrce</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/openlog|syslog|readlink|symlink|popepassthru|stream_socket_server|scandir|assert|pcntl_exec|fwrite|curl|system|eval|assert|flag|passthru|exec|chroot|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore/i&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wafsqli</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/select|and|\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\x26|\x7c|or|into|from|where|join|sleexml|extractvalue|+|regex|copy|read|file|create|grand|dir|insert|link|server|drop|=|&gt;|&lt;|;|\&quot;|\&#x27;|\^|\|/i&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wafxss</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> !<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\&#x27;|http|\&quot;|\`|cookie|&lt;|&gt;|script/i&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/select|flag|union|\\$|&#x27;|&quot;</span>|--|#|\<span class="number">0</span>|into|alert|img|prompt|set|<span class="comment">/*|x09|x0a|x0b|x0c|x0d|xa0|%|&lt;|&gt;|^|x00|#|x23|[0-9]|file|=|or|x7c|select|and|flag|into|where|x26|&#x27;|&quot;|union|`|sleep|benchmark|regexp|from|count|procedure|and|ascii|substr|substring|left|right|union|if|case|pow|exp|order|sleep|benchmark|into|load|outfile|dumpfile|load_file|join|show|select|update|set|concat|delete|alter|insert|create|union|or|drop|not|for|join|is|between|group_concat|like|where|user|ascii|greatest|mid|substr|left|right|char|hex|ord|case|limit|conv|table|mysql_history|flag|count|rpad|&amp;|*|.|/is&quot;,$s)||strlen($s)&gt;50)&#123;</span></span><br><span class="line"><span class="comment">    header(&quot;Location: /&quot;);</span></span><br><span class="line"><span class="comment">    die();</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 竞赛 </category>
          
          <category> AWDP </category>
          
          <category> 强网杯青少赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 强网杯 </tag>
            
            <tag> 青少年组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【流量分析】EasyUSB</title>
      <link href="/articles/undefined.html"/>
      <url>/articles/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>正所谓，师夷长技以制夷。我第一次做USB流量分析，参考文章如下：</p><ul><li><a href="https://blog.csdn.net/ON_Zero/article/details/130528679">https://blog.csdn.net/ON_Zero/article/details/130528679</a></li><li><a href="https://www.xjx100.cn/news/616208.html?action=onClick">https://www.xjx100.cn/news/616208.html?action=onClick</a></li><li><a href="http://www.willhsu.com/zb_users/upload/2021/06/202106241624549419156181.pdf">http://www.willhsu.com/zb_users/upload/2021/06/202106241624549419156181.pdf</a></li></ul><p>题目：<a href="https://pan.baidu.com/s/1oF2bmxPfevePeTqpLUVqvA?pwd=p67f">https://pan.baidu.com/s/1oF2bmxPfevePeTqpLUVqvA?pwd=p67f</a></p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>第一次做USB流量分析，所以参考文章了解到如下知识点：</p><p><img src="/../img/%E3%80%90%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E3%80%91EasyUSB/image-20231116195246385.png"></p><p>当然，这个知识点对，但也不完全对。因为没有说到组合键的问题，这道题解题过程中也是因为组合键的坑所以没有完美解决。</p><p>既然第三组hex对照了键值，所以可以写一个脚本进行解答。前两天正好看到tshark的使用方法，正好使用tshark进行处理。</p><h1 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h1><p>因为流量包里没有别的东西，所以使用tshark进行分析，导出全部的usb.capdata：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tshark -r easyUSB.pcapng -T fields -e usb.capdata | sed &#x27;/^\s*$/d&#x27; &gt; usbdata.txt</span><br></pre></td></tr></table></figure><p>在上面的命令中，并且过滤换行。</p><p><img src="/../img/%E3%80%90%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E3%80%91EasyUSB/image-20231116195253469.png"></p><p><img src="/../img/%E3%80%90%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E3%80%91EasyUSB/image-20231116195257184.png"></p><p>得到上面的数据</p><p>接着需要细分这个数据，使用下面的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f, <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fi:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        a = line.strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(a) == <span class="number">16</span>:</span><br><span class="line">            out = <span class="string">&#x27;:&#x27;</span>.join(a[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(a), <span class="number">2</span>))</span><br><span class="line">            fi.write(out + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>参考文章的脚本太乱了，让ai优化了一下。</p><p><img src="/../img/%E3%80%90%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E3%80%91EasyUSB/image-20231116195303767.png"></p><p>接着需要分析每一行的第三组字符，下面是脚本，也是根据参考文章的脚本进行优化、修改的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">mappings = &#123;</span><br><span class="line">    <span class="number">0x04</span>: <span class="string">&quot;A&quot;</span>,</span><br><span class="line">    <span class="number">0x05</span>: <span class="string">&quot;B&quot;</span>,</span><br><span class="line">    <span class="number">0x06</span>: <span class="string">&quot;C&quot;</span>,</span><br><span class="line">    <span class="number">0x07</span>: <span class="string">&quot;D&quot;</span>,</span><br><span class="line">    <span class="number">0x08</span>: <span class="string">&quot;E&quot;</span>,</span><br><span class="line">    <span class="number">0x09</span>: <span class="string">&quot;F&quot;</span>,</span><br><span class="line">    <span class="number">0x0A</span>: <span class="string">&quot;G&quot;</span>,</span><br><span class="line">    <span class="number">0x0B</span>: <span class="string">&quot;H&quot;</span>,</span><br><span class="line">    <span class="number">0x0C</span>: <span class="string">&quot;I&quot;</span>,</span><br><span class="line">    <span class="number">0x0D</span>: <span class="string">&quot;J&quot;</span>,</span><br><span class="line">    <span class="number">0x0E</span>: <span class="string">&quot;K&quot;</span>,</span><br><span class="line">    <span class="number">0x0F</span>: <span class="string">&quot;L&quot;</span>,</span><br><span class="line">    <span class="number">0x10</span>: <span class="string">&quot;M&quot;</span>,</span><br><span class="line">    <span class="number">0x11</span>: <span class="string">&quot;N&quot;</span>,</span><br><span class="line">    <span class="number">0x12</span>: <span class="string">&quot;O&quot;</span>,</span><br><span class="line">    <span class="number">0x13</span>: <span class="string">&quot;P&quot;</span>,</span><br><span class="line">    <span class="number">0x14</span>: <span class="string">&quot;Q&quot;</span>,</span><br><span class="line">    <span class="number">0x15</span>: <span class="string">&quot;R&quot;</span>,</span><br><span class="line">    <span class="number">0x16</span>: <span class="string">&quot;S&quot;</span>,</span><br><span class="line">    <span class="number">0x17</span>: <span class="string">&quot;T&quot;</span>,</span><br><span class="line">    <span class="number">0x18</span>: <span class="string">&quot;U&quot;</span>,</span><br><span class="line">    <span class="number">0x19</span>: <span class="string">&quot;V&quot;</span>,</span><br><span class="line">    <span class="number">0x1A</span>: <span class="string">&quot;W&quot;</span>,</span><br><span class="line">    <span class="number">0x1B</span>: <span class="string">&quot;X&quot;</span>,</span><br><span class="line">    <span class="number">0x1C</span>: <span class="string">&quot;Y&quot;</span>,</span><br><span class="line">    <span class="number">0x1D</span>: <span class="string">&quot;Z&quot;</span>,</span><br><span class="line">    <span class="number">0x1E</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="number">0x1F</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="number">0x20</span>: <span class="string">&quot;3&quot;</span>,</span><br><span class="line">    <span class="number">0x21</span>: <span class="string">&quot;4&quot;</span>,</span><br><span class="line">    <span class="number">0x22</span>: <span class="string">&quot;5&quot;</span>,</span><br><span class="line">    <span class="number">0x23</span>: <span class="string">&quot;6&quot;</span>,</span><br><span class="line">    <span class="number">0x24</span>: <span class="string">&quot;7&quot;</span>,</span><br><span class="line">    <span class="number">0x25</span>: <span class="string">&quot;8&quot;</span>,</span><br><span class="line">    <span class="number">0x26</span>: <span class="string">&quot;9&quot;</span>,</span><br><span class="line">    <span class="number">0x27</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="number">0x28</span>: <span class="string">&quot;\n&quot;</span>,</span><br><span class="line">    <span class="number">0x2a</span>: <span class="string">&quot;[DEL]&quot;</span>,</span><br><span class="line">    <span class="number">0x2B</span>: <span class="string">&quot;    &quot;</span>,</span><br><span class="line">    <span class="number">0x2C</span>: <span class="string">&quot; &quot;</span>,</span><br><span class="line">    <span class="number">0x2D</span>: <span class="string">&quot;-&quot;</span>,</span><br><span class="line">    <span class="number">0x2E</span>: <span class="string">&quot;=&quot;</span>,</span><br><span class="line">    <span class="number">0x2F</span>: <span class="string">&quot;[&quot;</span>,</span><br><span class="line">    <span class="number">0x30</span>: <span class="string">&quot;]&quot;</span>,</span><br><span class="line">    <span class="number">0x31</span>: <span class="string">&quot;\\&quot;</span>,</span><br><span class="line">    <span class="number">0x32</span>: <span class="string">&quot;~&quot;</span>,</span><br><span class="line">    <span class="number">0x33</span>: <span class="string">&quot;;&quot;</span>,</span><br><span class="line">    <span class="number">0x34</span>: <span class="string">&quot;&#x27;&quot;</span>,</span><br><span class="line">    <span class="number">0x36</span>: <span class="string">&quot;,&quot;</span>,</span><br><span class="line">    <span class="number">0x37</span>: <span class="string">&quot;.&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    lines = file.readlines()</span><br><span class="line"></span><br><span class="line">output = []</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    hex_data = line.strip().split(<span class="string">&quot;:&quot;</span>)[<span class="number">2</span>]  <span class="comment"># 提取第三组16进制数据</span></span><br><span class="line">    decimal_data = <span class="built_in">int</span>(hex_data, <span class="number">16</span>)  <span class="comment"># 转换为十进制</span></span><br><span class="line">    <span class="keyword">if</span> decimal_data <span class="keyword">in</span> mappings:</span><br><span class="line">        output.append(mappings[decimal_data])</span><br><span class="line"></span><br><span class="line">output_text = <span class="string">&quot;&quot;</span>.join(output)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;out1.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(output_text)</span><br></pre></td></tr></table></figure><p><img src="/../img/%E3%80%90%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E3%80%91EasyUSB/image-20231116195311200.png"></p><p>执行后得到上图</p><p>是不是发现有点熟悉但是有点怪怪的？其实这就是一个Python脚本，删除一些没用的字符，得到下面的内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FROMM CRYPTO.CIPHER IMPPORT DES</span><br><span class="line">KEY = <span class="string">B&#x27;20232023&#x27;</span></span><br><span class="line">AD = <span class="string">B&#x27;FLAGDESENCRYPT11&#x27;</span></span><br><span class="line">CIPHER = DESS.NEW9KEY,DES.MODE-ECB0</span><br><span class="line">ENC = CIPHER.ENCRYPT9AD0</span><br><span class="line">FLAG = ENC.HEX90</span><br><span class="line">FLAG</span><br></pre></td></tr></table></figure><p>那么现在应该会发现问题了，文中的数字其实是组合键的结果，我们将组合键默认为Shift加上相应的按键。</p><p>使用AI优化也很方便：</p><p><img src="/../img/%E3%80%90%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E3%80%91EasyUSB/image-20231116195317551.png"></p><p>如果flag不对，那么11应该也是需要转换的，所以结果是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"></span><br><span class="line">KEY = <span class="string">b&#x27;20232023&#x27;</span></span><br><span class="line"><span class="comment"># AD = b&#x27;FLAGDESENCRYPT11&#x27;</span></span><br><span class="line">AD = <span class="string">b&#x27;flagdesencrypt!!&#x27;</span></span><br><span class="line">cipher = DES.new(KEY, DES.MODE_ECB)</span><br><span class="line">enc = cipher.encrypt(AD)</span><br><span class="line">flag = enc.<span class="built_in">hex</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>在另一个师傅的提醒下，说明有一个好用的工具：</p><p><a href="https://github.com/WangYihang/UsbKeyboardDataHacker">https://github.com/WangYihang/UsbKeyboardDataHacker</a></p><p><img src="/../img/%E3%80%90%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E3%80%91EasyUSB/image-20231116195324829.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Misc </category>
          
          <category> 流量分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流量分析 </tag>
            
            <tag> CTF题目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具】tsocks</title>
      <link href="/articles/undefined.html"/>
      <url>/articles/undefined.html</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>tsocks 是一款能让任何软件通过 SOCKS 代理上网的工具，属于透明 SOCKS 代理软件。SOCKS，全称 Socket Secure，是一种电路级的底层网关协议，由 David Koblas 在 1990 年开发，此后一直作为 Internet RFC 标准开放。</p><p>不同于传统的应用层代理或 HTTP 层代理，SOCKS 代理的工作方式更为底层和简洁，仅仅传递数据包，而并不涉及到特定应用层的信息处理。因此，SOCKS 代理具有较高的灵活性和通用性。在 Linux 系统中，可以通过配置系统代理设置来实现全局代理，例如使用 socks5 协议进行网络流量的转发和管理。</p><p>这款工具是我在 wget 下载 github 的文件的时候遇到不支持 socks5 的问题在网上检索得知的。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tsocks</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/tsocks.conf</span><br></pre></td></tr></table></figure><p><img src="/../img/%E3%80%90%E5%B7%A5%E5%85%B7%E3%80%91tsocks/image.png"></p><p>配置 server 为代理服务器，server_port 为 socks5 代理端口</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsocks wget https://example</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【工具】tcpdump</title>
      <link href="/articles/undefined.html"/>
      <url>/articles/undefined.html</url>
      
        <content type="html"><![CDATA[<p><img src="/../img/%E3%80%90%E5%B7%A5%E5%85%B7%E3%80%91tcpdump/image-20241028102859786.png"></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Tcpdump 是 Linux 系统下的一个强大的命令行网络抓包工具，同时也是一个网络数据采集分析工具。它使用 libpcap 库来抓取网络数据包，这个库在几乎所有的 Linux&#x2F;Unix 系统中都有。 Tcpdump 可以截获网络上传送的数据包并进行分析，支持针对网络层、协议、主机、网络或端口的过滤，并提供与（and）、或（or）、非（not）等逻辑语句来帮助去除无用的信息。</p><p>作为管理员必备的工具之一，tcpdump 以其强大的功能和灵活的截取策略，成为高级系统管理员分析网络和排查问题的重要工具。此外，由于提供了源代码并且公开了接口，所以 tcpdump 具备很强的可扩展性，对于网络维护和入侵检测都是非常有用的工具。需要注意的是，因为 tcpdump 需要将网络接口设置为混杂模式，所以普通用户不能正常执行，只有具有 root 权限的用户才能直接执行它来获取网络上的信息。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>有部分系统已经默认安装了 tcpdump，如果没有安装，直接使用软件包管理器进行安装即可。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="捕捉数据包"><a href="#捕捉数据包" class="headerlink" title="捕捉数据包"></a>捕捉数据包</h2><p>捕捉数据包，并将其保存为 pcap 格式数据包。默认监听的网卡为 eth0，运行一段时间后，按 ctrl+c 停止抓包，数据会自动保存。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -w output.pcap</span><br></pre></td></tr></table></figure><h2 id="捕获指定-IP"><a href="#捕获指定-IP" class="headerlink" title="捕获指定 IP"></a>捕获指定 IP</h2><p>通常情况下，TCPDump 会捕获全局域网的数据包。这样会造成数据包很大，不易分析数据，因为我们可以对其进行简单的过滤。如，只捕获 192.168.123.43 这台设备的数据包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump host 192.168.123.43 -w output.pcap</span><br></pre></td></tr></table></figure><h2 id="捕获特定协议"><a href="#捕获特定协议" class="headerlink" title="捕获特定协议"></a>捕获特定协议</h2><p>TCPDump 可以通过协议名称 (tcp udp icmp arp) 过滤要捕获的数据包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump tcp -w output.pcap</span><br></pre></td></tr></table></figure><h2 id="捕获特定端口"><a href="#捕获特定端口" class="headerlink" title="捕获特定端口"></a>捕获特定端口</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump port 80 -w output.pcap</span><br></pre></td></tr></table></figure><h2 id="捕获特定网卡"><a href="#捕获特定网卡" class="headerlink" title="捕获特定网卡"></a>捕获特定网卡</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -i eth0 -w output.pcap</span><br></pre></td></tr></table></figure><h2 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h2><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>尝试将网络和广播地址转换成名称</td></tr><tr><td>-d</td><td>把编译过的数据包编码转换成可阅读的格式。</td></tr><tr><td>-e</td><td>在每列上显示连接层级的文件头</td></tr><tr><td>-f</td><td>用数字显示网际网络地址</td></tr><tr><td>-i</td><td>使用指定的网络设备送出数据包</td></tr><tr><td>-v</td><td>详细显示指令执行过程</td></tr><tr><td>-w</td><td>把数据包数据写入指定的文件</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Misc </category>
          
          <category> 流量分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流量分析 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
